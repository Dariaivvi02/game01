import pygame
import random
import os
import asyncio
import platform
import sys

# Размеры объектов
BASKET_W = 100
BASKET_H = 20
BALL_R = 15
ROCK_R = 20

# Цвета
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
RED = (220, 50, 50)
BLUE = (50, 50, 220)
GREEN = (50, 220, 50)
GRAY = (100, 100, 100)
DARK_GRAY = (50, 50, 50)
YELLOW = (255, 255, 0)

# Настройки окна
WIDTH = 800
HEIGHT = 600
FPS = 60

# Глобальные константы
BALL_SPEED = 2
ROCK_SPEED = 4
SPAWN_TIMER = 60

# Шрифты
pygame.font.init()
font = pygame.font.SysFont("Arial", 36)
small_font = pygame.font.SysFont("Arial", 24)

class Basket:
    """Класс корзины для ловли объектов"""
    def __init__(self):
        self.w = BASKET_W
        self.h = BASKET_H
        self.x = WIDTH // 2 - self.w // 2
        self.y = HEIGHT - 50
        self.speed = 7
        self.rect = pygame.Rect(self.x, self.y, self.w, self.h)
        self.color = WHITE

    def move(self, dir):
        """Движение корзины влево/вправо"""
        if dir == "left" and self.x > 0:
            self.x -= self.speed
        elif dir == "right" and self.x < WIDTH - self.w:
            self.x += self.speed
        self.rect.topleft = (self.x, self.y)

    def draw(self, screen):
        """Отрисовка корзины"""
        pygame.draw.rect(screen, self.color, self.rect, border_radius=10)

class Ball:
    """Класс полезного шарика"""
    def __init__(self):
        self.x = random.randint(BALL_R, WIDTH - BALL_R)
        self.y = -BALL_R
        self.r = 1  # Начинаем с маленького размера для анимации
        self.target_r = BALL_R
        self.color = random.choice([RED, BLUE, GREEN])
        self.speed = BALL_SPEED
        self.rect = pygame.Rect(self.x - self.r, self.y - self.r, self.r * 2, self.r * 2)
        self.grow_speed = 0.5  # Скорость роста при появлении

    def move(self):
        """Движение шарика вниз и анимация появления"""
        self.y += self.speed
        
        # Анимация роста
        if self.r < self.target_r:
            self.r += self.grow_speed
            if self.r > self.target_r:
                self.r = self.target_r
                
        self.rect = pygame.Rect(self.x - self.r, self.y - self.r, self.r * 2, self.r * 2)

    def draw(self, screen):
        """Отрисовка шарика"""
        pygame.draw.circle(screen, self.color, (self.x, self.y), int(self.r))

class Rock:
    """Класс препятствия (камня)"""
    def __init__(self):
        self.x = random.randint(ROCK_R, WIDTH - ROCK_R)
        self.y = -ROCK_R
        self.r = 1  # Начинаем с маленького размера для анимации
        self.target_r = ROCK_R
        self.color = GRAY
        self.speed = ROCK_SPEED
        self.rect = pygame.Rect(self.x - self.r, self.y - self.r, self.r*2, self.r*2)
        self.grow_speed = 0.7  # Скорость роста при появлении

    def move(self):
        """Движение камня вниз и анимация появления"""
        self.y += self.speed
        
        # Анимация роста
        if self.r < self.target_r:
            self.r += self.grow_speed
            if self.r > self.target_r:
                self.r = self.target_r
                
        self.rect = pygame.Rect(self.x - self.r, self.y - self.r, self.r*2, self.r*2)

    def draw(self, screen):
        """Отрисовка камня"""
        pygame.draw.circle(screen, self.color, (self.x, self.y), int(self.r))

class GameModel:
    """Класс игровой логики и состояния"""
    def __init__(self):
        self.state = "menu"
        self.basket = Basket()
        self.balls = []
        self.rocks = []
        self.score = 0
        self.lives = 3
        self.spawn_counter = 0
        self.high_score = self.get_high_score()
        self.paused = False
        self.game_over = False

    def get_high_score(self):
        """Получение рекорда из файла"""
        try:
            if os.path.exists("highscore.txt"):
                with open("highscore.txt", "r") as f:
                    return int(f.read())
        except:
            return 0
        return 0

    def save_high_score(self):
        """Сохранение рекорда в файл"""
        with open("highscore.txt", "w") as f:
            f.write(str(self.high_score))

    def spawn(self):
        """Создание новых объектов"""
        self.spawn_counter += 1
        if self.spawn_counter % SPAWN_TIMER == 0:
            if random.random() < 0.7:
                self.balls.append(Ball())
            else:
                self.rocks.append(Rock())

    def check_collisions(self):
        """Проверка столкновений объектов"""
        # Проверка столкновений с шарами
        for ball in self.balls[:]:
            if self.basket.rect.colliderect(ball.rect):
                self.balls.remove(ball)
                self.score += 10
                return "catch"  # Сигнал для воспроизведения звука
            elif ball.y > HEIGHT:
                self.balls.remove(ball)
                self.lives -= 1
                if self.lives <= 0:
                    self.game_over = True
                    return "life_lost"

        # Проверка столкновений с камнями
        for rock in self.rocks[:]:
            if self.basket.rect.colliderect(rock.rect):
                self.rocks.remove(rock)
                self.lives -= 1
                if self.lives <= 0:
                    self.game_over = True
                    return "rock_hit"
            elif rock.y > HEIGHT:
                self.rocks.remove(rock)
                
        return None

    def update(self, direction):
        """Обновление состояния игры"""
        if self.state != "playing" or self.paused:
            return None
            
        # Обработка ввода
        if direction:
            self.basket.move(direction)
            
        # Создание объектов
        self.spawn()
        
        # Обновление позиций
        for ball in self.balls:
            ball.move()
        for rock in self.rocks:
            rock.move()
            
        # Проверка столкновений
        collision_result = self.check_collisions()
        
        # Обработка конца игры
        if self.game_over:
            if self.score > self.high_score:
                self.high_score = self.score
                self.save_high_score()
            self.state = "game_over"
            
        return collision_result

    def reset_game(self):
        """Сброс состояния для новой игры"""
        self.basket = Basket()
        self.balls = []
        self.rocks = []
        self.score = 0
        self.lives = 3
        self.spawn_counter = 0
        self.paused = False
        self.game_over = False
        self.state = "playing"

class GameView:
    """Класс визуального представления игры"""
    def __init__(self, screen):
        self.screen = screen
        self.particles = []  # Список частиц для эффектов
        
    def add_particles(self, x, y, color, count=10):
        """Добавление частиц для визуальных эффектов"""
        for _ in range(count):
            self.particles.append({
                'x': x,
                'y': y,
                'dx': random.uniform(-2, 2),
                'dy': random.uniform(-2, 2),
                'size': random.randint(2, 6),
                'color': color,
                'life': 30
            })

    def update_particles(self):
        """Обновление состояния частиц"""
        for p in self.particles[:]:
            p['x'] += p['dx']
            p['y'] += p['dy']
            p['life'] -= 1
            if p['life'] <= 0:
                self.particles.remove(p)

    def draw_particles(self):
        """Отрисовка частиц"""
        for p in self.particles:
            pygame.draw.circle(
                self.screen, 
                p['color'], 
                (int(p['x']), int(p['y'])), 
                p['size']
            )

    def draw_button(self, text, x, y, w, h, color1, color2):
        """Отрисовка интерактивной кнопки"""
        pos = pygame.mouse.get_pos()
        rect = pygame.Rect(x, y, w, h)
        hover = rect.collidepoint(pos)
        
        pygame.draw.rect(self.screen, color2 if hover else color1, rect, border_radius=10)
        pygame.draw.rect(self.screen, WHITE, rect, 2, border_radius=10)
        
        label = font.render(text, True, WHITE)
        self.screen.blit(label, (x + (w - label.get_width())//2, y + (h - label.get_height())//2))
        return hover

    def show_menu(self, high_score):
        """Отображение главного меню"""
        self.screen.fill(BLACK)
        
        # Заголовок
        title = font.render("Ball Catcher", True, YELLOW)
        self.screen.blit(title, (WIDTH//2 - title.get_width()//2, 100))
        
        # Рекорд
        score_text = small_font.render(f"High Score: {high_score}", True, WHITE)
        self.screen.blit(score_text, (WIDTH//2 - score_text.get_width()//2, 170))
        
        # Кнопки
        start_hover = self.draw_button("Start Game", WIDTH//2 - 100, 250, 200, 50, DARK_GRAY, GRAY)
        score_hover = self.draw_button("High Score", WIDTH//2 - 100, 330, 200, 50, DARK_GRAY, GRAY)
        exit_hover = self.draw_button("Exit", WIDTH//2 - 100, 410, 200, 50, DARK_GRAY, GRAY)
        
        return start_hover, score_hover, exit_hover

    def show_high_score(self, high_score):
        """Отображение экрана рекордов"""
        self.screen.fill(BLACK)
        score_text = font.render(f"High Score: {high_score}", True, YELLOW)
        self.screen.blit(score_text, (WIDTH//2 - score_text.get_width()//2, 200))
        
        back_hover = self.draw_button("Back", WIDTH//2 - 100, 400, 200, 50, DARK_GRAY, GRAY)
        return back_hover

    def show_game_over(self, score, high_score):
        """Отображение экрана завершения игры"""
        self.screen.fill(BLACK)
        
        # Тексты
        go_text = font.render("Game Over", True, YELLOW)
        sc_text = font.render(f"Your Score: {score}", True, WHITE)
        hi_text = font.render(f"High Score: {high_score}", True, WHITE)

        self.screen.blit(go_text, (WIDTH//2 - go_text.get_width()//2, 150))
        self.screen.blit(sc_text, (WIDTH//2 - sc_text.get_width()//2, 250))
        self.screen.blit(hi_text, (WIDTH//2 - hi_text.get_width()//2, 350))

        # Кнопки
        menu_hover = self.draw_button("Back to Menu", WIDTH//2 - 100, 450, 200, 50, DARK_GRAY, GRAY)
        restart_hover = self.draw_button("Play Again", WIDTH//2 - 100, 520, 200, 50, DARK_GRAY, GRAY)
        
        return menu_hover, restart_hover

    def draw_hud(self, score, lives):
        """Отрисовка игрового HUD"""
        sc = small_font.render(f"Score: {score}", True, WHITE)
        lv = small_font.render(f"Lives: {lives}", True, WHITE)
        
        pygame.draw.rect(self.screen, DARK_GRAY, (5, 5, sc.get_width() + 10, sc.get_height() + 10))
        pygame.draw.rect(self.screen, DARK_GRAY, (WIDTH - lv.get_width() - 15, 5, lv.get_width() + 10, lv.get_height() + 10))
        
        self.screen.blit(sc, (10, 10))
        self.screen.blit(lv, (WIDTH - lv.get_width() - 10, 10))

    def draw_game(self, basket, balls, rocks, score, lives):
        """Отрисовка игрового поля"""
        self.screen.fill(BLACK)
        
        # Обновление и отрисовка частиц
        self.update_particles()
        self.draw_particles()
        
        # Отрисовка объектов
        basket.draw(self.screen)
        for ball in balls:
            ball.draw(self.screen)
        for rock in rocks:
            rock.draw(self.screen)
            
        # Отрисовка HUD
        self.draw_hud(score, lives)

    def draw_pause(self):
        """Отрисовка экрана паузы"""
        pause_text = font.render("Paused", True, YELLOW)
        self.screen.blit(pause_text, (WIDTH//2 - pause_text.get_width()//2, HEIGHT//2))

class Game:
    """Основной класс игры, управляющий логикой и отображением"""
    def __init__(self, screen):
        self.screen = screen
        self.model = GameModel()
        self.view = GameView(screen)
        self.clock = pygame.time.Clock()
        self.last_direction = None

    async def main_loop(self):
        """Основной игровой цикл"""
        running = True
        
        while running:
            # Обработка событий
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    self.model.save_high_score()
                    running = False
                    
                # Обработка клавиатуры
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_p and self.model.state == "playing":
                        self.model.paused = not self.model.paused
                    elif event.key == pygame.K_LEFT:
                        self.last_direction = "left"
                    elif event.key == pygame.K_RIGHT:
                        self.last_direction = "right"
                
                # Сброс направления при отпускании клавиш
                if event.type == pygame.KEYUP:
                    if event.key in (pygame.K_LEFT, pygame.K_RIGHT):
                        self.last_direction = None
            
            # Обновление модели игры
            self.model.update(self.last_direction)
            
            # Отрисовка текущего состояния
            if self.model.state == "menu":
                start_hover, score_hover, exit_hover = self.view.show_menu(self.model.high_score)
                if pygame.mouse.get_pressed()[0]:
                    if start_hover:
                        self.model.reset_game()
                    elif score_hover:
                        self.model.state = "high_score"
                    elif exit_hover:
                        running = False
                        
            elif self.model.state == "high_score":
                back_hover = self.view.show_high_score(self.model.high_score)
                if pygame.mouse.get_pressed()[0] and back_hover:
                    self.model.state = "menu"
                    
            elif self.model.state == "game_over":
                menu_hover, restart_hover = self.view.show_game_over(
                    self.model.score, 
                    self.model.high_score
                )
                if pygame.mouse.get_pressed()[0]:
                    if menu_hover:
                        self.model.state = "menu"
                    elif restart_hover:
                        self.model.reset_game()
                        
            elif self.model.state == "playing":
                self.view.draw_game(
                    self.model.basket,
                    self.model.balls,
                    self.model.rocks,
                    self.model.score,
                    self.model.lives
                )
                if self.model.paused:
                    self.view.draw_pause()
            
            # Обновление экрана
            pygame.display.flip()
            self.clock.tick(FPS)
            await asyncio.sleep(1.0 / FPS)
        
        # Завершение работы
        self.model.save_high_score()
        pygame.quit()
        sys.exit()

def setup():
    """Инициализация игры"""
    # Инициализация Pygame
    pygame.init()
    
    # Создание окна
    screen = pygame.display.set_mode((WIDTH, HEIGHT))
    pygame.display.set_caption("Ball Catcher")
    
    return screen

async def main():
    """Асинхронная точка входа"""
    screen = setup()
    game = Game(screen)
    await game.main_loop()

# Запуск игры
if platform.system() == "Emscripten":
    asyncio.ensure_future(main())
else:
    if __name__ == "__main__":
        asyncio.run(main())
